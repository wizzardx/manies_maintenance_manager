"""Fixtures for the view tests."""

# pylint: disable=redefined-outer-name

import datetime

import pytest
from django.core.files.uploadedfile import SimpleUploadedFile

from marnies_maintenance_manager.jobs.models import Job
from marnies_maintenance_manager.jobs.utils import safe_read
from marnies_maintenance_manager.users.models import User


@pytest.fixture()
def job_created_by_bob(bob_agent_user: User) -> Job:
    """Create a job instance for Bob the agent.

    Args:
        bob_agent_user (User): The User instance representing Bob the agent.

    Returns:
        Job: The job instance created for Bob.

    """
    return Job.objects.create(
        agent=bob_agent_user,
        date=datetime.date(2022, 1, 1),
        address_details="1234 Main St, Springfield, IL",
        gps_link="https://www.google.com/maps",
        quote_request_details="Replace the kitchen sink",
    )


@pytest.fixture()
def job_created_by_alice(alice_agent_user: User) -> Job:
    """Create a job instance for Alice the agent.

    Args:
        alice_agent_user (User): The User instance representing Alice the agent.

    Returns:
        Job: The job instance created for Alice.

    """
    return Job.objects.create(
        agent=alice_agent_user,
        date="2022-01-01",
        address_details="1234 Main St, Springfield, IL",
        gps_link="https://www.google.com/maps",
        quote_request_details="Replace the kitchen sink",
    )


@pytest.fixture()
def bob_job_with_quote(
    bob_job_with_initial_marnie_inspection: Job,
    test_pdf: SimpleUploadedFile,
) -> Job:
    """Return a job where Bob has uploaded the invoice.

    Args:
        bob_job_with_initial_marnie_inspection (Job): The job created by Bob with the
            initial inspection done by Marnie.
        test_pdf (SimpleUploadedFile): The test PDF file.

    Returns:
        Job: The job where Bob has uploaded the invoice.
    """
    job = bob_job_with_initial_marnie_inspection
    job.quote = test_pdf
    job.status = Job.Status.QUOTE_UPLOADED.value
    with safe_read(test_pdf):
        job.save()
    return job


@pytest.fixture()
def job_rejected_by_bob(bob_job_with_quote: Job) -> Job:
    """Return a job where Bob has rejected the quote.

    Args:
        bob_job_with_quote (Job): The job created by Bob with the
            initial inspection done by Marnie.

    Returns:
        Job: The job where Bob has rejected the quote.
    """
    job = bob_job_with_quote
    job.status = Job.Status.QUOTE_REJECTED_BY_AGENT.value
    job.accepted_or_rejected = Job.AcceptedOrRejected.REJECTED.value
    job.save()
    return job


@pytest.fixture()
def job_accepted_by_bob(bob_job_with_quote: Job) -> Job:
    """Return a job where Bob has accepted the quote.

    Args:
        bob_job_with_quote (Job): The job created by Bob with the quote uploaded.

    Returns:
        Job: The job where Bob has accepted the quote.
    """
    job = bob_job_with_quote
    job.status = Job.Status.QUOTE_ACCEPTED_BY_AGENT.value
    job.accepted_or_rejected = Job.AcceptedOrRejected.ACCEPTED.value
    job.save()
    return job


@pytest.fixture()
def bob_job_with_deposit_pop(
    job_accepted_by_bob: Job,
    test_pdf: SimpleUploadedFile,
) -> Job:
    """Return a job where Bob has uploaded the deposit proof of payment.

    Args:
        job_accepted_by_bob (Job): The job where Bob has accepted the quote.
        test_pdf (SimpleUploadedFile): The test PDF file.

    Returns:
        Job: The job where Bob has uploaded the deposit proof of payment.
    """
    job = job_accepted_by_bob
    job.deposit_proof_of_payment = test_pdf
    job.status = Job.Status.DEPOSIT_POP_UPLOADED.value

    with safe_read(test_pdf):
        job.save()

    return job


# Constant determining how many job completion photos are generated by the
# "bob_job_completed_by_marnie" fixture.
BOB_JOB_COMPLETED_BY_MARNIE_NUM_PHOTOS = 2


@pytest.fixture()
def bob_job_completed_by_marnie(
    bob_job_with_deposit_pop: Job,
    test_pdf: SimpleUploadedFile,
    test_image: SimpleUploadedFile,
) -> Job:
    """Return a job where Marnie has completed the job.

    Args:
        bob_job_with_deposit_pop (Job): The job where Bob has uploaded the deposit proof
            of payment.
        test_pdf (SimpleUploadedFile): The test PDF file.
        test_image (SimpleUploadedFile): The test image file.

    Returns:
        Job: The job where Marnie has completed the job.
    """
    job = bob_job_with_deposit_pop

    # Check that the Job is in the correct initial state:
    assert job.status == Job.Status.DEPOSIT_POP_UPLOADED.value
    assert job.job_date is None
    assert job.comments == ""
    assert job.complete is False
    assert job.invoice.name == ""

    # Update Job to the completed state:
    job.status = Job.Status.MARNIE_COMPLETED.value
    job.job_date = datetime.date(2022, 1, 1)
    job.comments = "Job completed successfully"
    job.complete = True
    job.invoice = test_pdf

    # Add two photos to the completed job.
    for _ in range(BOB_JOB_COMPLETED_BY_MARNIE_NUM_PHOTOS):
        with safe_read(test_image):
            job.job_completion_photos.create(photo=test_image)

    # Save to db.
    with safe_read(test_pdf):
        job.save()

    # Return the updated job:
    return job


@pytest.fixture()
def bob_job_with_final_payment_pop(
    bob_job_completed_by_marnie: Job,
    test_pdf: SimpleUploadedFile,
) -> Job:
    """Return a job where Bob has uploaded the final payment proof of payment.

    Args:
        bob_job_completed_by_marnie (Job): The job where Marnie has completed the job.
        test_pdf (SimpleUploadedFile): The test PDF file.

    Returns:
        Job: The job where Bob has uploaded the final payment proof of payment.
    """
    job = bob_job_completed_by_marnie
    job.final_payment_pop = test_pdf
    job.status = Job.Status.FINAL_PAYMENT_POP_UPLOADED.value

    with safe_read(test_pdf):
        job.save()

    return job
